import logging
import uuid
import os
import asyncio
import requests
from aiohttp import web
from aiogram import Bot, Dispatcher, Router, types
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from config import BOT_TOKEN, SHOP_ID, SECRET_KEY

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()

products = {
    "bot_course": {"name": "–ö—É—Ä—Å: –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", "price": 199},
    "pdf_guide": {"name": "PDF-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "price": 99},
    "combo": {"name": "–ü–∞–∫–µ—Ç: –ö—É—Ä—Å + –ì–∞–π–¥", "price": 249},
}

def product_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{v['name']} ‚Äì {v['price']}‚ÇΩ", callback_data=k)]
        for k, v in products.items()
    ])

@router.message(CommandStart())
@router.message()
async def greet_user(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –≤–∞—à–µ–º —Ü–∏—Ñ—Ä–æ–≤–æ–º –º–∞–≥–∞–∑–∏–Ω–µ!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=product_keyboard()
    )

@router.callback_query()
async def handle_product_selection(callback: types.CallbackQuery):
    product_id = callback.data
    product = products.get(product_id)

    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    payment_data = {
        "amount": {
            "value": f"{product['price']:.2f}",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": f"https://t.me/{(await bot.get_me()).username}"
        },
        "capture": True,
        "description": f"–ü–æ–∫—É–ø–∫–∞: {product['name']}"
    }

    response = requests.post(
        "https://api.yookassa.ru/v3/payments",
        json=payment_data,
        auth=(SHOP_ID, SECRET_KEY),
        headers={
            "Idempotence-Key": str(uuid.uuid4()),
            "Content-Type": "application/json"
        }
    )

    if response.status_code == 200:
        url = response.json()["confirmation"]["confirmation_url"]
        await callback.message.answer(
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã <b>{product['name']}</b> –Ω–∞ {product['price']}‚ÇΩ:\n{url}"
        )
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç –ÆKassa: {response.status_code} ‚Äî {response.text}")
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.\n\n{response.json().get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –æ—à–∏–±–∫–∏')}"
        )
    await callback.answer()

dp.include_router(router)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è aiohttp ===

async def yookassa_webhook_handler(request):
    data = await request.json()
    logging.info(f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ÆKassa: {data}")
    return web.Response(text="ok")

async def root_handler(request):
    return web.json_response({"status": "ok", "message": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"})

async def telegram_webhook_handler(request: web.Request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    return web.Response(text="ok")

async def on_startup(app):
    webhook_url = os.getenv("WEBHOOK_URL")
    if not webhook_url:
        logging.error("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    await bot.set_webhook(webhook_url)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")

async def on_cleanup(app):
    await bot.delete_webhook()
    await bot.session.close()

def setup_web_app():
    app = web.Application()
    app.router.add_post("/yookassa-webhook", yookassa_webhook_handler)
    app.router.add_post("/webhook", telegram_webhook_handler)
    app.router.add_get("/", root_handler)
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)
    return app

async def main():
    port = int(os.getenv("PORT", 3000))
    app = setup_web_app()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logging.info(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
