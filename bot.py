# bot.py ‚Äî –ß–ò–°–¢–´–ô –ë–û–¢ –î–õ–Ø –ü–†–ò–Å–ú–ê –ó–ê–ö–ê–ó–û–í (–±–µ–∑ YooKassa)
import os
import json
import logging
import asyncio
import re

from aiohttp import web
from aiogram import Bot, Dispatcher, Router, types
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
logging.basicConfig(level=logging.INFO)

# --- –ö–æ–Ω—Ñ–∏–≥: —á–∏—Ç–∞–µ–º –∏–∑ config.py –∏–ª–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
try:
    # –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å config.py ‚Äî –æ–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å BOT_TOKEN, WEBHOOK_URL, PORT
    from config import BOT_TOKEN, WEBHOOK_URL, PORT, ADMINS_FILE, ADMIN_IDS
except Exception:
    # fallback ‚Äî —á–∏—Ç–∞–µ–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")
    try:
        PORT = int(os.getenv("PORT", 3000))
    except:
        PORT = 3000
    ADMINS_FILE = os.getenv("ADMINS_FILE", "admins.json")
    ADMIN_IDS = os.getenv("ADMIN_IDS", "")  # —Å—Ç—Ä–æ–∫–∞ "123,456"

# --- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ---
def parse_default_admins(admins_str: str):
    out = []
    if not admins_str:
        return out
    for part in admins_str.split(","):
        p = part.strip()
        if not p:
            continue
        try:
            out.append(int(p))
        except:
            continue
    return out

DEFAULT_ADMINS = parse_default_admins(ADMIN_IDS if 'ADMIN_IDS' in globals() else "")

if 'ADMINS_FILE' not in globals():
    ADMINS_FILE = "admins.json"

def load_admins():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (list[int]). –ï—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ—Ç, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DEFAULT_ADMINS."""
    if os.path.exists(ADMINS_FILE):
        try:
            with open(ADMINS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                if isinstance(data, list):
                    return [int(x) for x in data]
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {ADMINS_FILE}: {e}")
    # —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å default
    try:
        with open(ADMINS_FILE, "w", encoding="utf-8") as f:
            json.dump(DEFAULT_ADMINS, f)
    except Exception:
        pass
    return DEFAULT_ADMINS.copy()

def save_admins(admins):
    try:
        with open(ADMINS_FILE, "w", encoding="utf-8") as f:
            json.dump([int(x) for x in admins], f)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ admins: {e}")
        return False

# --- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
PHONE_RE = re.compile(r"^\+?\d{7,15}$")
def is_valid_phone(phone: str) -> bool:
    return bool(PHONE_RE.match(phone.strip()))

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# --- –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é ---
def main_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="start_order")],
        [InlineKeyboardButton(text="‚Ñπ –ü–æ–º–æ—â—å", callback_data="help")]
    ])

contact_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
order_data = {}  # {user_id: {"state": "await_contact"/"await_address"/"await_items", "phone":..., "address":..., "items":...}}

# --- –ö–æ–º–∞–Ω–¥—ã /start ---
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.\n\n"
        "–£–¥–æ–±–Ω–æ –æ—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑ ‚Äî –∫—É—Ä—å–µ—Ä –ø—Ä–∏–≤–µ–∑—ë—Ç –≤—Å—ë –∫ –≤–∞–º.",
        reply_markup=main_menu_keyboard()
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ ---
@router.callback_query()
async def callback_handler(cq: types.CallbackQuery):
    data = (cq.data or "").strip()
    uid = cq.from_user.id

    if data == "start_order":
        order_data[uid] = {"state": "await_contact", "phone": None, "address": None, "items": None}
        await cq.message.answer(
            "üìù –û—Ç–ª–∏—á–Ω–æ! –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∫—É—Ä—å–µ—Ä —Å–º–æ–∂–µ—Ç —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è).",
            reply_markup=contact_keyboard
        )
        await cq.answer()
        return

    if data == "help":
        await cq.message.answer(
            "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:\n"
            "1) –ù–∞–∂–º–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑¬ª\n"
            "2) –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä\n"
            "3) –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
            "4) –ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω –∏–ª–∏ –∫—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
        )
        await cq.answer()
        return

    await cq.answer()

# --- –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤/–∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ---
@router.message()
async def messages_handler(message: Message):
    uid = message.from_user.id
    text = (message.text or "").strip()

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑–∞
    if uid in order_data:
        state = order_data[uid].get("state")

        # 1) –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if state == "await_contact":
            phone = None
            # –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
            if message.contact and message.contact.phone_number:
                phone = message.contact.phone_number
            else:
                # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–ª–µ—Ñ–æ–Ω
                if text and is_valid_phone(text):
                    phone = text
                else:
                    await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567.")
                    return
            order_data[uid]["phone"] = phone
            order_data[uid]["state"] = "await_address"
            await message.answer("üìç –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂).", reply_markup=ReplyKeyboardRemove())
            return

        # 2) –æ–∂–∏–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
        if state == "await_address":
            if not text:
                await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 15, –∫–≤. 3, –ø–æ–¥—ä–µ–∑–¥ 2).")
                return
            order_data[uid]["address"] = text
            order_data[uid]["state"] = "await_items"
            await message.answer("üõí –ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä: —Ö–ª–µ–±, –º–æ–ª–æ–∫–æ, —è–π—Ü–∞). –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ.")
            return

        # 3) –æ–∂–∏–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        if state == "await_items":
            if not text:
                await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Ç–µ–∫—Å—Ç–æ–º.")
                return
            order_data[uid]["items"] = text

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            user = message.from_user
            user_name = user.full_name or "–ö–ª–∏–µ–Ω—Ç"
            username = f"@{user.username}" if user.username else "‚Äî"

            order_text = (
                f"üì¨ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_name} ({username})\n"
                f"üÜî UserID: <code>{uid}</code>\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order_data[uid]['phone']}\n"
                f"üìç –ê–¥—Ä–µ—Å: {order_data[uid]['address']}\n"
                f"üõç –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n{order_data[uid]['items']}\n\n"
                "‚Äî –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –º–æ–∂–Ω–æ –ø—Ä—è–º–æ –≤ Telegram (–Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–∏–∫/–Ω–æ–º–µ—Ä)."
            )

            admins_now = load_admins()
            if not admins_now:
                await message.answer("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –Ω–æ –ø–æ–∫–∞ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à ID –≤ ADMIN_IDS.")
            else:
                send_errors = False
                for admin_id in admins_now:
                    try:
                        await bot.send_message(admin_id, order_text)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                        send_errors = True

                if send_errors:
                    await message.answer("‚ö† –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                else:
                    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä.")

            # —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            order_data.pop(uid, None)
            return

    # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ –ø–æ—Ç–æ–∫–µ ‚Äî –¥–∞—ë–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    if text:
        await message.answer("–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start –∏ –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫—É ¬´–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑¬ª.")

# --- –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–æ–≤: add/del/list ---
@router.message(Command("addadmin"))
async def cmd_addadmin(message: Message):
    caller = message.from_user.id
    admins_now = load_admins()
    if caller not in admins_now:
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤.")
        return

    parts = (message.text or "").split()
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <user_id>\n–ü—Ä–∏–º–µ—Ä: /addadmin 123456789")
        return
    try:
        new_id = int(parts[1])
    except:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π ID ‚Äî –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
        return
    if new_id in admins_now:
        await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω.")
        return
    admins_now.append(new_id)
    if save_admins(admins_now):
        await message.reply(f"‚úÖ –ê–¥–º–∏–Ω {new_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤.")

@router.message(Command("deladmin"))
async def cmd_deladmin(message: Message):
    caller = message.from_user.id
    admins_now = load_admins()
    if caller not in admins_now:
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return

    parts = (message.text or "").split()
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deladmin <user_id>")
        return
    try:
        rem_id = int(parts[1])
    except:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        return
    if rem_id not in admins_now:
        await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤.")
        return
    admins_now = [a for a in admins_now if a != rem_id]
    if save_admins(admins_now):
        await message.reply(f"‚úÖ –ê–¥–º–∏–Ω {rem_id} —É–¥–∞–ª—ë–Ω.")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤.")

@router.message(Command("admins"))
async def cmd_list_admins(message: Message):
    admins_now = load_admins()
    if not admins_now:
        await message.reply("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.")
        return
    await message.reply("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n" + "\n".join([str(x) for x in admins_now]))

# --- Webhook / —Å–µ—Ä–≤–µ—Ä (–¥–ª—è Render) ---
async def telegram_webhook_handler(request: web.Request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Telegram-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    return web.Response(text="ok")

async def root_handler(request):
    return web.json_response({"status":"ok","message":"bot running"})

async def on_startup(app):
    webhook = os.getenv("WEBHOOK_URL") or (WEBHOOK_URL if 'WEBHOOK_URL' in globals() else None)
    if webhook:
        try:
            await bot.set_webhook(webhook)
            logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook}")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")
    else:
        logging.info("WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å long-polling –ª–æ–∫–∞–ª—å–Ω–æ)")

async def on_cleanup(app):
    try:
        await bot.delete_webhook()
    except:
        pass
    await bot.session.close()

def setup_web_app():
    app = web.Application()
    app.router.add_post("/webhook", telegram_webhook_handler)
    app.router.add_get("/", root_handler)
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)
    return app

async def main():
    port = int(os.getenv("PORT", PORT if 'PORT' in globals() else 3000))
    app = setup_web_app()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logging.info(f"Server started on port {port}")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())