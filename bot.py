import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –£–∫–∞–∑—ã–≤–∞–µ–º ID –∞–¥–º–∏–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é ---
ADMIN_IDS = [5112853993]  # —Ç–≤–æ–π ID

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_address = State()
    waiting_for_items = State()

# –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
order_data = {}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="‚Ñπ –û –Ω–∞—Å")]
    ],
    resize_keyboard=True
)

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

# --- –ö–Ω–æ–ø–∫–∞ "–û –Ω–∞—Å" ---
@dp.message(lambda msg: msg.text == "‚Ñπ –û –Ω–∞—Å")
async def about(message: types.Message):
    await message.answer("–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ Telegram. üöÄ")

# --- –ù–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞ ---
@dp.message(lambda msg: msg.text == "üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
async def make_order(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(OrderStates.waiting_for_name)

# --- –ò–º—è ---
@dp.message(OrderStates.waiting_for_name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderStates.waiting_for_address)

# --- –ê–¥—Ä–µ—Å ---
@dp.message(OrderStates.waiting_for_address)
async def get_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    await state.set_state(OrderStates.waiting_for_items)

# --- –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É ---
@dp.message(OrderStates.waiting_for_items)
async def get_items(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()

    name = data.get("name")
    address = data.get("address")
    items = message.text

    order_text = (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üìç –ê–¥—Ä–µ—Å: {address}\n"
        f"üõí –¢–æ–≤–∞—Ä—ã: {items}\n\n"
        f"Telegram ID –∑–∞–∫–∞–∑—á–∏–∫–∞: {user_id}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, order_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä.", reply_markup=main_kb)
    await state.clear()

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if _name_ == "_main_":
    asyncio.run(main())