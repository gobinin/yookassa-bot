import logging
import uuid
import os
import asyncio
import re
import requests
import json
from aiohttp import web
from aiogram import Bot, Dispatcher, Router, types
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command, Text
from config import BOT_TOKEN, SHOP_ID, SECRET_KEY, WEBHOOK_URL, PORT, load_admins, save_admins

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# --- –ü–†–û–î–£–ö–¢–´ (–æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä –∫–∞–∫ –ø—Ä–∏–º–µ—Ä) ---
products = {
    "bot_course": {"name": "–°–∫–∞—á–∞—Ç—å GTA 5", "price": 199.00},
}

download_links = {
    "bot_course": "https://disk.yandex.ru/i/7sMDMIoR9-Lhnw"
}

# –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã (–∫–∞–∫ –±—ã–ª–∏)
user_data = {}  # –¥–ª—è –æ–ø–ª–∞—Ç—ã (old flow)
# –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫)
order_data = {}  # {user_id: {"state": "await_contact"/"await_address"/"await_items", "phone":..., "address":..., "items":...}}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω–æ–≤ (–∏–∑ admins.json –∏–ª–∏ DEFAULT_ADMINS)
ADMINS = load_admins()  # —Å–ø–∏—Å–æ–∫ int

def is_valid_phone(phone: str) -> bool:
    return re.match(r"^\+?\d{7,15}$", phone) is not None

def is_valid_email(email: str) -> bool:
    return re.match(r"[^@]+@[^@]+\.[^@]+", email) is not None

def product_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{v['name']} ‚Äì {int(v['price'])}‚ÇΩ", callback_data=k)]
        for k, v in products.items()
    ])

def main_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="start_order")],
        [InlineKeyboardButton(text="üíæ –ú–∞–≥–∞–∑–∏–Ω (—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã)", callback_data="show_products")]
    ])

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (request_contact)
contact_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

@router.message(CommandStart())
async def greet_user(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.\n\n"
        "–ú—ã –¥–µ–ª–∞–µ–º –≤—Å—ë –ø—Ä–æ—Å—Ç–æ: –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –∑–∞–∫–∞–∑ ‚Äî –∫—É—Ä—å–µ—Ä –ø—Ä–∏–≤–æ–∑–∏—Ç.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=main_menu_keyboard()
    )

@router.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    data = callback.data or ""
    if data == "start_order":
        # –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ –∑–∞–∫–∞–∑–∞
        uid = callback.from_user.id
        order_data[uid] = {"state": "await_contact", "phone": None, "address": None, "items": None}
        await callback.message.answer(
            "üìù –û—Ç–ª–∏—á–Ω–æ ‚Äî –Ω–∞—á–Ω—ë–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.\n\n"
            "–ù–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—á—Ç–æ–±—ã –∫—É—Ä—å–µ—Ä –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è).",
            reply_markup=contact_keyboard
        )
        await callback.answer()
        return

    if data == "show_products":
        await callback.message.answer(
            "üíæ –ù–∞—à –º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=product_keyboard()
        )
        await callback.answer()
        return

    # –∏–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ product_id (—Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫ –æ–ø–ª–∞—Ç—ã)
    product_id = data
    product = products.get(product_id)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    user_data[callback.from_user.id] = {"product_id": product_id, "email": None}
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{product['name']}</b> –∑–∞ {int(product['price'])}‚ÇΩ.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä: user@example.com –∏–ª–∏ +79991234567"
    )
    await callback.answer()
    return

@router.message()
async def general_message_handler(message: Message):
    uid = message.from_user.id
    text = (message.text or "").strip()

    # ---------- 1) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ (–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫) ----------
    if uid in order_data:
        state = order_data[uid]["state"]

        # 1.1 –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if state == "await_contact":
            # –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª –∫–æ–Ω—Ç–∞–∫—Ç (–∫–Ω–æ–ø–∫–∞)
            if message.contact and message.contact.phone_number:
                phone = message.contact.phone_number
            else:
                # –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ –Ω–æ–º–µ—Ä, –µ—Å–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π
                if is_valid_phone(text):
                    phone = text
                else:
                    await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7999XXXXXXX.")
                    return
            order_data[uid]["phone"] = phone
            order_data[uid]["state"] = "await_address"
            await message.answer("üìç –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂).", reply_markup=ReplyKeyboardRemove())
            return

        # 1.2 –æ–∂–∏–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
        if state == "await_address":
            if not text:
                await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º.")
                return
            order_data[uid]["address"] = text
            order_data[uid]["state"] = "await_items"
            await message.answer("üõí –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä: —Ö–ª–µ–±, –º–æ–ª–æ–∫–æ, —è–π—Ü–∞). –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.")
            return

        # 1.3 –æ–∂–∏–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        if state == "await_items":
            if not text:
                await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Ç–µ–∫—Å—Ç–æ–º.")
                return
            order_data[uid]["items"] = text

            # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            user = message.from_user
            user_name = f"{user.full_name}" if user.full_name else f"User {uid}"
            username = f"@{user.username}" if user.username else "‚Äî"

            order_text = (
                f"üì¨ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_name} ({username})\n"
                f"üÜî UserID: <code>{uid}</code>\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order_data[uid]['phone']}\n"
                f"üìç –ê–¥—Ä–µ—Å: {order_data[uid]['address']}\n"
                f"üõç –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n{order_data[uid]['items']}\n\n"
                "‚Äî –û—Ç–≤–µ—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É –º–æ–∂–Ω–æ –ø—Ä—è–º–æ –≤ Telegram (–Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–∏–∫/–Ω–æ–º–µ—Ä)."
            )

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            admins_now = load_admins()
            if not admins_now:
                await message.answer("‚ùó –ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")
            else:
                for admin_id in admins_now:
                    try:
                        await bot.send_message(admin_id, order_text)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

                await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä.")
            # –∑–∞–≤–µ—Ä—à–∞–µ–º
            del order_data[uid]
            return

    # ---------- 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –ø–æ–∫—É–ø–∫—É —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞) ----------
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∫—É–ø–∫–∏ (user_data –µ—Å—Ç—å –∏ email –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω)
    if uid in user_data and user_data[uid].get("email") is None:
        contact = text
        if is_valid_email(contact):
            contact_type = "email"
        elif is_valid_phone(contact):
            contact_type = "phone"
        else:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: user@example.com –∏–ª–∏ +79991234567).")
            return

        user_data[uid]["email"] = contact
        product_id = user_data[uid]["product_id"]
        product = products[product_id]
        bot_info = await bot.get_me()

        receipt_customer = {contact_type: contact}

        payment_data = {
            "amount": {
                "value": f"{product['price']:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/{bot_info.username}"
            },
            "capture": True,
            "description": f"{uid}:{product_id}",
            "receipt": {
                "customer": receipt_customer,
                "items": [
                    {
                        "description": product["name"][:128],
                        "quantity": "1.00",
                        "amount": {
                            "value": f"{product['price']:.2f}",
                            "currency": "RUB"
                        },
                        "vat_code": 1
                    }
                ],
                "tax_system_code": 1
            }
        }

        logging.info(f"–°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ —Å –¥–∞–Ω–Ω—ã–º–∏: {payment_data}")

        response = requests.post(
            "https://api.yookassa.ru/v3/payments",
            json=payment_data,
            auth=(str(SHOP_ID), SECRET_KEY),
            headers={
                "Idempotence-Key": str(uuid.uuid4()),
                "Content-Type": "application/json"
            }
        )

        try:
            data = response.json()
        except Exception:
            data = {}

        if response.ok and "confirmation" in data:
            url = data["confirmation"]["confirmation_url"]
            pay_button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=url)]
            ])
            await message.answer(
                f"üîó –î–ª—è –æ–ø–ª–∞—Ç—ã <b>{product['name']}</b> –Ω–∞ —Å—É–º–º—É {int(product['price'])}‚ÇΩ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.",
                reply_markup=pay_button
            )
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç YooKassa: {response.status_code} ‚Äî {response.text}")
            err_desc = data.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –æ—à–∏–±–∫–∏")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã:\n\n{err_desc}")

        return

    # ---------- 3) –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –≤ –ø–æ—Ç–æ–∫–µ) ----------
    # –ú–æ–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –∏–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
    # –ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–¥—Å–∫–∞–∑–∫–∞ –º–µ–Ω—é
    if text:
        await message.answer("–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start –∏ –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫—É ¬´–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑¬ª.")
    return

# --- YooKassa webhook (–æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –±—ã–ª–æ) ---
async def yookassa_webhook_handler(request):
    data = await request.json()
    logging.info(f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç YooKassa: {data}")

    event = data.get("event")
    obj = data.get("object", {})
    status = obj.get("status")
    description = obj.get("description", "")

    if event == "payment.succeeded" and status == "succeeded":
        try:
            user_id_str, product_id = description.split(":")
            user_id = int(user_id_str)
            product = products.get(product_id)
            if product:
                link = download_links.get(product_id)
                if link:
                    await bot.send_message(
                        user_id,
                        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞!\n\nüì• –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è <b>{product['name']}</b>:\n\n{link}"
                    )
                else:
                    await bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                await bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            user_data.pop(user_id, None)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    return web.Response(text="ok")

async def root_handler(request):
    return web.json_response({"status": "ok", "message": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"})

async def telegram_webhook_handler(request: web.Request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Telegram-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    return web.Response(text="ok")

# --- –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞: add/del/list ---
@router.message(Command("addadmin"))
async def add_admin_handler(message: Message):
    from_user = message.from_user.id
    admins_now = load_admins()
    if from_user not in admins_now:
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤.")
        return

    parts = (message.text or "").split()
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <user_id>\n–ü—Ä–∏–º–µ—Ä: /addadmin 123456789")
        return
    try:
        new_id = int(parts[1])
    except:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π ID. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
        return
    if new_id in admins_now:
        await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    admins_now.append(new_id)
    if save_admins(admins_now):
        await message.reply(f"‚úÖ –ê–¥–º–∏–Ω {new_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤.")

@router.message(Command("deladmin"))
async def del_admin_handler(message: Message):
    from_user = message.from_user.id
    admins_now = load_admins()
    if from_user not in admins_now:
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return

    parts = (message.text or "").split()
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deladmin <user_id>\n–ü—Ä–∏–º–µ—Ä: /deladmin 123456789")
        return
    try:
        rem_id = int(parts[1])
    except:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π ID. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
        return
    if rem_id not in admins_now:
        await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤.")
        return
    admins_now = [a for a in admins_now if a != rem_id]
    if save_admins(admins_now):
        await message.reply(f"‚úÖ –ê–¥–º–∏–Ω {rem_id} —É–¥–∞–ª—ë–Ω.")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤.")

@router.message(Command("admins"))
async def list_admins(message: Message):
    admins_now = load_admins()
    if not admins_now:
        await message.reply("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.")
        return
    await message.reply("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n" + "\n".join([str(x) for x in admins_now]))

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –∑–∞–ø—É—Å–∫ ---
async def on_startup(app):
    webhook_url = os.getenv("WEBHOOK_URL") or WEBHOOK_URL
    if not webhook_url:
        logging.error("‚ùó WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω")
        return
    try:
        await bot.set_webhook(webhook_url)
        logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

async def on_cleanup(app):
    try:
        await bot.delete_webhook()
    except:
        pass
    await bot.session.close()

def setup_web_app():
    app = web.Application()
    app.router.add_post("/yookassa-webhook", yookassa_webhook_handler)
    app.router.add_post("/webhook", telegram_webhook_handler)
    app.router.add_get("/", root_handler)
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)
    return app

async def main():
    port = int(os.getenv("PORT", PORT))
    app = setup_web_app()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logging.info(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    while True:
        await asyncio.sleep(3600)

if _name_ == "_main_":
    asyncio.run(main())