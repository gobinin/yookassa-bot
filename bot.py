import logging
import uuid
import os
import asyncio
import requests
from aiohttp import web
from aiogram import Bot, Dispatcher, Router, types
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from config import BOT_TOKEN, SHOP_ID, SECRET_KEY

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()

# –¢–æ–≤–∞—Ä—ã
products = {
    "bot_course": {"name": "–ö—É—Ä—Å: –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", "price": 199},
    "pdf_guide": {"name": "PDF-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "price": 99},
    "combo": {"name": "–ü–∞–∫–µ—Ç: –ö—É—Ä—Å + –ì–∞–π–¥", "price": 249},
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def product_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{v['name']} ‚Äì {v['price']}‚ÇΩ", callback_data=k)]
        for k, v in products.items()
    ])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
@router.message(CommandStart())
@router.message()
async def greet_user(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –≤–∞—à–µ–º —Ü–∏—Ñ—Ä–æ–≤–æ–º –º–∞–≥–∞–∑–∏–Ω–µ!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=product_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@router.callback_query()
async def handle_product_selection(callback: types.CallbackQuery):
    product_id = callback.data
    product = products.get(product_id)

    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    payment_data = {
        "amount": {
            "value": f"{product['price']:.2f}",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": f"https://t.me/{(await bot.get_me()).username}"
        },
        "capture": True,
        "description": f"–ü–æ–∫—É–ø–∫–∞: {product['name']}"
    }

    response = requests.post(
        "https://api.yookassa.ru/v3/payments",
        json=payment_data,
        auth=(SHOP_ID, SECRET_KEY),
        headers={
            "Idempotence-Key": str(uuid.uuid4()),
            "Content-Type": "application/json"
        }
    )

    if response.status_code == 200:
        url = response.json()["confirmation"]["confirmation_url"]
        await callback.message.answer(
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã <b>{product['name']}</b> –Ω–∞ {product['price']}‚ÇΩ:\n{url}"
        )
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.")
    await callback.answer()

dp.include_router(router)

# Webhook –ÆKassa
async def yookassa_webhook_handler(request):
    data = await request.json()
    logging.info(f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ÆKassa: {data}")
    return web.Response(text="ok")

# aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def setup_web_app():
    app = web.Application()
    app.router.add_post("/yookassa-webhook", yookassa_webhook_handler)
    return app

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def start():
    port = int(os.getenv("PORT", 3000))  # Render –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —Å–≤–æ–π –ø–æ—Ä—Ç
    app = setup_web_app()

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

    logging.info("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ (–±–µ–∑ asyncio.run, –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è Windows)
loop = asyncio.get_event_loop()
loop.run_until_complete(start())