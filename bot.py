# bot.py ‚Äî –ß–ò–°–¢–´–ô –ë–û–¢ –î–õ–Ø –ü–†–ò–Å–ú–ê –ó–ê–ö–ê–ó–û–í (–±–µ–∑ YooKassa, –∞–¥–º–∏–Ω—ã –∏–∑ .env)
import os
import json
import logging
import asyncio
import re

from aiohttp import web
from aiogram import Bot, Dispatcher, Router, types
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.filters import CommandStart, Command
from dotenv import load_dotenv

# --- –õ–æ–≥–∏ ---
logging.basicConfig(level=logging.INFO)

# --- –ö–æ–Ω—Ñ–∏–≥ –∏–∑ .env/–æ–∫—Ä—É–∂–µ–Ω–∏—è ---
# —Ñ–∞–π–ª –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å config.env –∏–ª–∏ .env ‚Äî –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—Å—è –ª—é–±–æ–π
load_dotenv("config.env")
load_dotenv()

BOT_TOKEN   = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT        = int(os.getenv("PORT", "3000"))

# —á–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ ADMINS_IDS –∏–ª–∏ –∏–∑ ADMIN_IDS ‚Äî —É–¥–æ–±–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
ADMINS_RAW  = os.getenv("ADMINS_IDS") or os.getenv("ADMIN_IDS") or ""

def parse_admins(value: str):
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
    - "123,456"
    - "123 456"
    - "[123, 456]"
    - "123"
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç List[int]
    """
    if not value:
        return []
    s = value.strip()
    # —Ñ–æ—Ä–º–∞—Ç JSON-—Å–ø–∏—Å–∫–∞
    if (s.startswith("[") and s.endswith("]")) or (s.startswith("(") and s.endswith(")")):
        try:
            arr = json.loads(s.replace("(", "[").replace(")", "]"))
            return [int(x) for x in arr if str(x).strip()]
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∫–∞–∫ JSON: {e}")
    # —Ñ–æ—Ä–º–∞—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–ø—Ä–æ–±–µ–ª
    parts = re.split(r"[,\s]+", s)
    out = []
    for p in parts:
        p = p.strip()
        if not p:
            continue
        try:
            out.append(int(p))
        except:
            logging.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π admin id: {p}")
    return out

ADMINS = parse_admins(ADMINS_RAW)
# –¥–µ—Ñ–æ–ª—Ç–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏–º —Ç–≤–æ–π ID, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–µ –±—ã–ª–æ –ø—É—Å—Ç–æ
if not ADMINS:
    ADMINS = [5112853993,1098404204]

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
PHONE_RE = re.compile(r"^\+?\d{7,15}$")
def is_valid_phone(phone: str) -> bool:
    return bool(PHONE_RE.match(phone.strip()))

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞/—Ä–æ—É—Ç–µ—Ä–∞ ---
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏/.env")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="start_order")],
        [InlineKeyboardButton(text="‚Ñπ –ü–æ–º–æ—â—å", callback_data="help")]
    ])

contact_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# --- –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤ ---
# {user_id: {"state": "...", "phone":..., "address":..., "items":...}}
order_data = {}

# --- /start ---
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.\n\n"
        "–£–¥–æ–±–Ω–æ –æ—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑ ‚Äî –∫—É—Ä—å–µ—Ä –ø—Ä–∏–≤–µ–∑—ë—Ç –≤—Å—ë –∫ –≤–∞–º.",
        reply_markup=main_menu_keyboard()
    )

# --- Inline-–∫–Ω–æ–ø–∫–∏ ---
@router.callback_query()
async def callback_handler(cq: types.CallbackQuery):
    data = (cq.data or "").strip()
    uid = cq.from_user.id

    if data == "start_order":
        order_data[uid] = {"state": "await_contact", "phone": None, "address": None, "items": None}
        await cq.message.answer(
            "üìù –û—Ç–ª–∏—á–Ω–æ! –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∫—É—Ä—å–µ—Ä —Å–º–æ–∂–µ—Ç —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è).",
            reply_markup=contact_keyboard
        )
        await cq.answer()
        return

    if data == "help":
        await cq.message.answer(
            "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:\n"
            "1) –ù–∞–∂–º–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑¬ª\n"
            "2) –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä\n"
            "3) –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
            "4) –ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω –∏–ª–∏ –∫—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
        )
        await cq.answer()
        return

    await cq.answer()

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@router.message()
async def messages_handler(message: Message):
    uid = message.from_user.id
    text = (message.text or "").strip()

    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∑–∞–∫–∞–∑
    if uid in order_data:
        state = order_data[uid].get("state")

        # 1) —Ç–µ–ª–µ—Ñ–æ–Ω
        if state == "await_contact":
            phone = None
            if message.contact and message.contact.phone_number:
                phone = message.contact.phone_number
            elif text and is_valid_phone(text):
                phone = text
            else:
                await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567.")
                return

            order_data[uid]["phone"] = phone
            order_data[uid]["state"] = "await_address"
            await message.answer("üìç –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂).", reply_markup=ReplyKeyboardRemove())
            return

        # 2) –∞–¥—Ä–µ—Å
        if state == "await_address":
            if not text:
                await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 15, –∫–≤. 3, –ø–æ–¥—ä–µ–∑–¥ 2).")
                return
            order_data[uid]["address"] = text
            order_data[uid]["state"] = "await_items"
            await message.answer("üõí –ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä: —Ö–ª–µ–±, –º–æ–ª–æ–∫–æ, —è–π—Ü–∞). –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ.")
            return

        # 3) –ø–µ—Ä–µ—á–µ–Ω—å —Ç–æ–≤–∞—Ä–æ–≤
        if state == "await_items":
            if not text:
                await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Ç–µ–∫—Å—Ç–æ–º.")
                return
            order_data[uid]["items"] = text

            # —Å–æ–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑
            user = message.from_user
            user_name = user.full_name or "–ö–ª–∏–µ–Ω—Ç"
            username = f"@{user.username}" if user.username else "‚Äî"

            order_text = (
                f"üì¨ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_name} ({username})\n"
                f"üÜî UserID: <code>{uid}</code>\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order_data[uid]['phone']}\n"
                f"üìç –ê–¥—Ä–µ—Å: {order_data[uid]['address']}\n"
                f"üõç –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n{order_data[uid]['items']}\n\n"
                "‚Äî –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –º–æ–∂–Ω–æ –ø—Ä—è–º–æ –≤ Telegram."
            )

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º (–∏–∑ .env)
            send_errors = False
            for admin_id in ADMINS:
                try:
                    await bot.send_message(int(admin_id), order_text)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                    send_errors = True

            if send_errors:
                await message.answer("‚ö† –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω–∞–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            else:
                await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä.")

            order_data.pop(uid, None)
            return

    # –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äî –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º
    if text:
        await message.answer("–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start –∏ –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫—É ¬´–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑¬ª.")

# --- Webhook / —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
async def telegram_webhook_handler(request: web.Request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Telegram-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    return web.Response(text="ok")

async def root_handler(request):
    return web.json_response({"status": "ok", "message": "bot running"})

async def on_startup(app):
    if WEBHOOK_URL:
        try:
            await bot.set_webhook(WEBHOOK_URL)
            logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")
    else:
        logging.info("WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –¥–ª—è Render –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.")

async def on_cleanup(app):
    try:
        await bot.delete_webhook()
    except:
        pass
    await bot.session.close()

def setup_web_app():
    app = web.Application()
    app.router.add_post("/webhook", telegram_webhook_handler)
    app.router.add_get("/", root_handler)
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)
    return app

async def main():
    app = setup_web_app()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logging.info(f"Server started on port {PORT}")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())